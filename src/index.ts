import { app, BrowserWindow, Menu, MenuItem, protocol } from 'electron';
import path from 'path';
import fs from 'fs';
import { Editor } from './editor/editor';
import { Constants } from './constants';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

let editor: Editor;
let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    maximizable: true,
    autoHideMenuBar: true,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    }
  });

  mainWindow.maximize();
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  Constants.setup();
  protocol.interceptFileProtocol(Constants.protocolPrefix, (request, callback) => {
    const url = request.url.substr(Constants.protocol.length);
    callback({ path: path.normalize(`${Constants.staticDir}/${url}`) });
  });

  editor = new Editor(mainWindow);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

app.on('ready', createWindow);
app.on('window-all-closed', () => { if (process.platform !== 'darwin') app.quit(); });
app.on('activate', () => { if (BrowserWindow.getAllWindows().length === 0) createWindow(); });


// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
